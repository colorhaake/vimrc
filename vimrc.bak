" My Bundles here:
"
" original repos on github
" not currently used
Bundle 'tpope/vim-rails.git'
Bundle 'kchmck/vim-coffee-script'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'juvenn/mustache.vim'
Bundle 'heartsentwined/vim-emblem'
Bundle 'ekalinin/Dockerfile.vim'
Bundle 'Align'
Bundle 'mru.vim'

" zen code
Bundle 'tristen/vim-sparkup'

" Vundle setting end

set backspace=2

" NerdTree setting
let NERDTreeIgnore = ['\.pyc$']

" file type setting
autocmd BufNewFile,BufRead Gemfile set filetype=ruby
autocmd BufNewFile,BufRead Capfile set filetype=ruby
autocmd BufNewFile,BufRead Podfile set filetype=ruby

" javascript indent
autocmd FileType javascript setlocal foldmethod=syntax foldlevel=100

" html indent
autocmd FileType html setlocal foldmethod=indent foldlevel=100

" coffeescript indent
autocmd FileType coffee setlocal foldmethod=indent foldlevel=100

" ruby setting
autocmd FileType ruby setlocal foldmethod=syntax
autocmd FileType ruby setlocal foldlevel=100

" markdown
autocmd BufNewFile,BufRead *.md set filetype=markdown

" latex
autocmd BufNewFile,BufRead *.tex set filetype=tex

" cmdline editing
cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <Esc>b <S-Left>
cnoremap <Esc>f <S-Right>

" window manipulation setting
au BufWinEnter * set winheight=6  " without this line the it will .... alert
au BufWinEnter * set winminheight=6

" Show the extra tailing space
highlight ExtraWhitespace ctermbg=red guibg=red
au BufWinEnter * match ExtraWhitespace /\s\+$/

" Command
" GREP
function RsGrep(...)
	if a:0 == 1
		execute 'vimgrep /'.expand('<cword>').'/gj ./'.a:1.'/**'
	else
		execute 'vimgrep /'.expand('<cword>').'/gj ./**'
	endif
	copen
endfunction
command -nargs=* GREP call RsGrep(<f-args>)

" Markdown
function Markdown()
	let full_name = fnameescape(expand('%:p'))
	let name = split(full_name, '\.')[0]
	let target = name.'.html'
	:execute ':!markdown '.full_name.' > '.target.' && open '.target
endfunction
command Markdown call Markdown()

" Latex
function Latex()
	let full_name = expand('%:p')
	let name = split(full_name, '\.')[0]
	let target = name.'.pdf'
	:execute ':!pdflatex -output-directory '.expand('%:p:h').' '.full_name.' && open '.target
endfunction
command Latex call Latex()

" load zsh env
set shell=zsh

" taglist
let Tlist_Use_Right_Window = 1

" syntastic
let g:syntastic_html_checkers=['']
let g:syntastic_scss_checkers=['']
let g:syntastic_scala_checkers=['']

" file type setting
let g:syntastic_mode_map = { "mode": "active",
                           \ "passive_filetypes": ["scala"] }

" JSX
let g:jsx_ext_required = 0
